{"version":3,"file":"logging.js","sourceRoot":"/","sources":["logging.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logging } from '@google-cloud/logging'\nimport { RewriteFrames } from '@sentry/integrations'\nimport * as Sentry from '@sentry/node'\nimport * as fs from 'fs'\nimport { i18 } from './localize'\nimport {\n  ConstructData,\n  constructPair,\n  fileData,\n  GCPData,\n  loggingData,\n  SentryData\n} from './types'\n\nconst chalk = require('chalk')\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      __rootdir__: string\n    }\n  }\n}\n\nglobal.__rootdir__ = __dirname || process.cwd()\n\n/**\n * Configures Chalk\n * @author TGTGamer\n * @since 1.0.0-alpha\n */\nexport const style = {\n  brand: {\n    videndumPurple: chalk.hex('4B428E')\n  },\n  log: {\n    default: chalk.inverse, // (0) The log entry has no assigned severity level.\n    debug: chalk.grey, // (100) Debug or trace information.\n    info: chalk.green, // (200) Routine information, such as ongoing status or performance.\n    notice: chalk.green, // (300) Normal but significant events, such as start up, shut down, or a configuration change.\n    warn: chalk.white, // (400) Warning events might cause problems.\n    error: chalk.yellow, // (500) Error events are likely to cause problems.\n    critical: chalk.yellow, // (600) Critical events cause more severe problems or outages.\n    alert: chalk.red, // (700) A person must take an action immediately.\n    emergency: chalk.red // (800) One or more systems are unusable.\n  }\n}\n\n/**\n * Main class used for package\n * @author TGTGamer\n * @since 1.0.0-alpha\n */\nexport class Log {\n  private gcp: Logging = new Logging()\n  protected constructData: ConstructData\n  public loglevel: number = 1\n  public readonly sentry = Sentry\n  public readonly loglevels = [\n    'default', // (0) The log entry has no assigned severity level.\n    'debug', // (100) Debug or trace information.\n    'info', // (200) Routine information, such as ongoing status or performance.\n    'notice', // (300) Normal but significant events, such as start up, shut down, or a configuration change.\n    'warn', // (400) Warning events might cause problems.\n    'error', // (500) Error events are likely to cause problems.\n    'critical', // (600) Critical events cause more severe problems or outages.\n    'alert', // (700) A person must take an action immediately.\n    'emergency' // (800) One or more systems are unusable.\n  ]\n  private constructorLogs: constructPair[] = []\n  gcpLogger: any\n  public configured: boolean = false\n\n  constructor(constructData: ConstructData) {\n    this.constructData = constructData\n    if (process.env.LOGLEVEL) this.loglevel = +process.env.LOGLEVEL\n    this.configureLogger(constructData)\n  }\n\n  async configureLogger(constructData: ConstructData) {\n    if (constructData.gcp?.enabled) await this.configureGCP(constructData.gcp)\n    if (constructData.sentry?.enabled)\n      await this.configureSentry(constructData.sentry)\n    if (constructData.file?.enabled)\n      await this.configureFile(constructData.file)\n    await this.constructorLogs.forEach(log => {\n      this.log(log.data, log.level)\n    })\n    this.configured = true\n  }\n\n  configureGCP(gcpData: GCPData) {\n    this.constructorLogs.push({\n      data: {\n        name: 'INFO',\n        message: 'logging.gcp.constructor',\n        translate: true\n      },\n      level: 1\n    })\n    this.gcp = new Logging({ projectId: gcpData.projectid })\n    this.gcpLogger = this.gcp.log(gcpData.logname)\n  }\n\n  configureSentry(SentryData: SentryData) {\n    this.constructorLogs.push({\n      data: {\n        name: 'INFO',\n        message: 'logging.sentry.constructor',\n        translate: true\n      },\n      level: 1\n    })\n    try {\n      this.sentry.init({\n        ...SentryData.config,\n        integrations: [\n          new Sentry.Integrations.Console(),\n          new Sentry.Integrations.Modules(),\n          new Sentry.Integrations.Http(),\n          new RewriteFrames({ root: global.__rootdir__ })\n        ]\n      })\n      this.sentry.configureScope(scope => {\n        if (SentryData.extras?.user) scope.setUser(SentryData.extras.user)\n        if (SentryData.extras?.tags)\n          SentryData.extras.tags.forEach(tag => {\n            scope.setTag(tag.key, tag.value)\n          })\n        if (SentryData.extras?.context)\n          SentryData.extras.context.forEach(context => {\n            scope.setContext(context.name, context.data)\n          })\n      })\n    } catch (_) {\n      this.constructorLogs.push({\n        data: {\n          name: 'INFO',\n          message: 'logging.sentry.error',\n          errors: _,\n          translate: true\n        },\n        level: 6\n      })\n    }\n  }\n\n  /**\n   * Sets up local logging to file\n   * @author TGTGamer\n   * @since 1.0.0-alpha\n   */\n  configureFile(fileData: fileData) {\n    this.constructorLogs.push({\n      data: {\n        name: 'INFO',\n        message: 'logging.file.constructor',\n        translate: true\n      },\n      level: 1\n    })\n    fs.access(fileData.config.logDirectory, fs.constants.F_OK, (err: any) => {\n      if (!err) {\n        return\n      } else {\n        this.constructorLogs.push({\n          data: {\n            name: 'INFO',\n            message: 'errors.fileDirectory.caught',\n            errors: err,\n            translate: true\n          },\n          level: 6\n        })\n        fs.mkdir(\n          fileData.config.logDirectory,\n          { recursive: false },\n          async (err: any) => {\n            if (err)\n              this.constructorLogs.push({\n                data: {\n                  name: 'INFO',\n                  message: 'errors.fileDirectory.thrown',\n                  errors: err,\n                  translate: true\n                },\n                level: 6\n              })\n            else\n              this.constructorLogs.push({\n                data: {\n                  name: 'INFO',\n                  message: 'errors.fileDirectory.solved',\n                  errors: err,\n                  translate: true\n                },\n                level: 3\n              })\n          }\n        )\n        return\n      }\n    })\n  }\n\n  /**\n   * Change the logging level.\n   * @param {number | string} level - Logging level to use.\n   */\n  setloglevel(level: number | string) {\n    if (typeof level == 'string') {\n      if (this.loglevels.indexOf(level) != -1) {\n        this.loglevel = this.loglevels.indexOf(level)\n      } else {\n        this.loglevel = 2\n      }\n    } else {\n      this.loglevel = level\n    }\n  }\n\n  /**\n   * Log your information or error to all platforms\n   * @param  {loggingData} loggingData\n   * @param  {number | string} type Optional types. Accepts both Numbers & String values. 1=debug, 2=info, 3=notice, 4=warn, 5=error, 6=critical, 7=alert, 8=emergency\n   * @example\n   * try {\n   *  core.user.getUserID(core.license.license_holder_email)\n   *  } catch(response){\n   *    core.log(response, 1)\n   *  }\n   * @return logs data to console, sentry and log file as appropriate\n   */\n  async log(loggingData: loggingData, type?: number | string) {\n    if (loggingData.translate)\n      loggingData.message = i18.t(loggingData.message, loggingData.T)\n    if (loggingData.errors) {\n      if (!Array.isArray(loggingData.errors))\n        loggingData.message = loggingData.message + ' ' + loggingData.errors\n      else {\n        loggingData.errors.forEach(\n          error => (loggingData.message = loggingData.message + ' ' + error)\n        )\n      }\n    }\n\n    // Defines log type\n    if (type && typeof type == 'string') {\n      if (this.loglevels.indexOf(type) != -1) {\n        loggingData.name = type.toUpperCase()\n        type = this.loglevels.indexOf(type)\n      } else {\n        loggingData.name = 'DEFAULT'\n        type = 0\n      }\n    } else if (typeof type == 'number' && type < this.loglevels.length) {\n      loggingData.name = this.loglevels[type].toUpperCase()\n      type = type\n    } else {\n      loggingData.name = `DEFAULT`\n      type = 0\n    }\n\n    // log to cloud logger\n    if (this.constructData.gcp?.enabled) {\n      if (!loggingData.metadata)\n        loggingData.metadata = {\n          resource: {\n            type: 'global'\n          },\n          severity: loggingData.name\n        }\n      let entry = this.gcpLogger.entry(loggingData.metadata, loggingData)\n      try {\n        await this.gcpLogger.write(entry)\n      } catch (err) {\n        this.log(err, 5)\n        this.constructData.gcp.enabled = false\n      }\n    }\n\n    // Translate the metadata\n    loggingData.name = await this.translate(\n      `logging.${loggingData.name.toLowerCase()}`\n    )\n\n    // add spacing\n    if (loggingData.name.length < 15) {\n      for (let i = loggingData.name.length; i < 15; i++) {\n        loggingData.name += ' '\n      }\n    }\n\n    if (type >= this.loglevel || process.env.DEBUG == 'true' || type == 1) {\n      // Log to local logger\n      if (this.constructData.file?.enabled) {\n        try {\n          fs.appendFile(\n            `${this.constructData.file?.config.logDirectory}/${this.constructData.file?.config.fileNamePattern}`,\n            `${loggingData.name}     ` + loggingData.message + '\\r\\n',\n            err => {\n              if (err) throw err\n            }\n          )\n        } catch (err) {\n          this.log(err, 5)\n          this.constructData.file.enabled = false\n        }\n      }\n\n      // Log to sentry\n      if (type >= 4 && this.constructData.sentry?.enabled) {\n        try {\n          const t: number = type,\n            data = loggingData\n          data.name = loggingData.message\n          this.sentry.withScope(scope => {\n            if (t == 4) scope.setLevel(this.sentry.Severity.Warning)\n            else if (t == 5) scope.setLevel(this.sentry.Severity.Error)\n            else if (t == 6) scope.setLevel(this.sentry.Severity.Critical)\n            else if (t >= 7) scope.setLevel(this.sentry.Severity.Fatal)\n            this.sentry.captureException(data)\n          })\n        } catch (_) {\n          this.log(_, 5)\n          this.constructData.sentry.enabled = false\n        }\n      }\n\n      // @ts-expect-error Colorise\n      loggingData.name = style.log[this.loglevels[type]](loggingData.name)\n\n      if (!!this.constructData.console?.enabled)\n        console.log(`${loggingData.name}     ` + loggingData.message)\n    }\n    return\n  }\n\n  translate(name: string): string {\n    return i18.t(name)\n  }\n\n  /**\n   * Used to shutdown logging - to ensure that all logs are processed\n   * @author TGTGamer\n   * @since 1.0.0-alpha\n   */\n  shutdown(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.sentry\n        .close(2000)\n        .then(async () => {\n          await this.log(\n            new Error('Logger successfully shutdown - safe to end all process'),\n            2\n          )\n          resolve()\n        })\n        .catch(_ => reject(_))\n    })\n  }\n}\n"]}