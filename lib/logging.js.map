{"version":3,"file":"logging.js","sourceRoot":"/","sources":["logging.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logging } from '@google-cloud/logging'\nimport { RewriteFrames } from '@sentry/integrations'\nimport * as Sentry from '@sentry/node'\nimport * as fs from 'fs'\nimport { i18 } from './localize'\nimport {\n  ConstructData,\n  constructPair,\n  fileData,\n  GCPData,\n  loggingData,\n  SentryData\n} from './types'\nconst chalk = require('chalk')\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      __rootdir__: string\n    }\n  }\n}\n\nglobal.__rootdir__ = __dirname || process.cwd()\n\n/**\n * Configures Chalk\n * @author TGTGamer\n * @since 1.0.0-alpha\n */\nexport const style = {\n  brand: {\n    videndumPurple: chalk.hex('4B428E')\n  },\n  log: {\n    default: chalk.inverse, // (0) The log entry has no assigned severity level.\n    debug: chalk.grey, // (100) Debug or trace information.\n    info: chalk.green, // (200) Routine information, such as ongoing status or performance.\n    notice: chalk.green, // (300) Normal but significant events, such as start up, shut down, or a configuration change.\n    warn: chalk.white, // (400) Warning events might cause problems.\n    error: chalk.yellow, // (500) Error events are likely to cause problems.\n    critical: chalk.yellow, // (600) Critical events cause more severe problems or outages.\n    alert: chalk.red, // (700) A person must take an action immediately.\n    emergency: chalk.red // (800) One or more systems are unusable.\n  }\n}\n\n/**\n * Main class used for package\n * @author TGTGamer\n * @since 1.0.0-alpha\n */\nexport class Log {\n  private gcp: Logging = new Logging()\n  protected constructData: ConstructData\n  public loglevel: number = 1\n  public readonly sentry = Sentry\n  public readonly loglevels = [\n    'default', // (0) The log entry has no assigned severity level.\n    'debug', // (100) Debug or trace information.\n    'info', // (200) Routine information, such as ongoing status or performance.\n    'notice', // (300) Normal but significant events, such as start up, shut down, or a configuration change.\n    'warn', // (400) Warning events might cause problems.\n    'error', // (500) Error events are likely to cause problems.\n    'critical', // (600) Critical events cause more severe problems or outages.\n    'alert', // (700) A person must take an action immediately.\n    'emergency' // (800) One or more systems are unusable.\n  ]\n  private constructorLogs: constructPair[] = []\n  gcpLogger: any\n  public configured: boolean = false\n\n  constructor(constructData: ConstructData) {\n    this.constructData = constructData\n    if (process.env.LOGLEVEL) this.loglevel = +process.env.LOGLEVEL\n    this.configureLogger(constructData)\n  }\n\n  async configureLogger(constructData: ConstructData) {\n    if (constructData.gcp?.enabled) await this.configureGCP(constructData.gcp)\n    if (constructData.sentry?.enabled)\n      await this.configureSentry(constructData.sentry)\n    if (constructData.file?.enabled)\n      await this.configureFile(constructData.file)\n    await this.constructorLogs.forEach(log => {\n      // this.log({ name: log.data }, log.level)\n    })\n    this.configured = true\n  }\n\n  configureGCP(gcpData: GCPData) {\n    this.constructorLogs.push({ data: 'logging.gcp.constructor', level: 1 })\n    this.gcp = new Logging({ projectId: gcpData.projectid })\n    this.gcpLogger = this.gcp.log(gcpData.logname)\n  }\n\n  configureSentry(SentryData: SentryData) {\n    this.constructorLogs.push({ data: 'logging.sentry.constructor', level: 1 })\n    try {\n      this.sentry.init({\n        ...SentryData.config,\n        integrations: [\n          new Sentry.Integrations.Console(),\n          new Sentry.Integrations.Modules(),\n          new Sentry.Integrations.Http(),\n          new RewriteFrames({ root: global.__rootdir__ })\n        ]\n      })\n      this.sentry.configureScope(scope => {\n        if (SentryData.extras?.user) scope.setUser(SentryData.extras.user)\n        if (SentryData.extras?.tags)\n          SentryData.extras.tags.forEach(tag => {\n            scope.setTag(tag.key, tag.value)\n          })\n        if (SentryData.extras?.context)\n          SentryData.extras.context.forEach(context => {\n            scope.setContext(context.name, context.data)\n          })\n      })\n    } catch (_) {\n      this.constructorLogs.push({ data: 'logging.sentry.error' + _, level: 6 })\n    }\n  }\n\n  /**\n   * Sets up local logging to file\n   * @author TGTGamer\n   * @since 1.0.0-alpha\n   */\n  configureFile(fileData: fileData) {\n    this.constructorLogs.push({ data: 'logging.file.constructor', level: 1 })\n    fs.access(fileData.config.logDirectory, fs.constants.F_OK, (err: any) => {\n      if (!err) {\n        return\n      } else {\n        this.constructorLogs.push({\n          data: 'errors.fileDirectory.caught' + err,\n          level: 6\n        })\n        fs.mkdir(\n          fileData.config.logDirectory,\n          { recursive: false },\n          async (err: any) => {\n            if (err)\n              this.constructorLogs.push({\n                data: 'errors.fileDirectory.thrown' + err,\n                level: 6\n              })\n            else\n              this.constructorLogs.push({\n                data: `errors.fileDirectory.solved`,\n                level: 3\n              })\n          }\n        )\n        return\n      }\n    })\n  }\n\n  /**\n   * Change the logging level.\n   * @param {number | string} level - Logging level to use.\n   */\n  setloglevel(level: number | string) {\n    if (typeof level == 'string') {\n      if (this.loglevels.indexOf(level) != -1) {\n        this.loglevel = this.loglevels.indexOf(level)\n      } else {\n        this.loglevel = 2\n      }\n    } else {\n      this.loglevel = level\n    }\n  }\n\n  /**\n   * Log your information or error to all platforms\n   * @param  {loggingData} loggingData\n   * @param  {number | string} type Optional types. Accepts both Numbers & String values. 1=debug, 2=info, 3=notice, 4=warn, 5=error, 6=critical, 7=alert, 8=emergency\n   * @example\n   * try {\n   *  core.user.getUserID(core.license.license_holder_email)\n   *  } catch(response){\n   *    core.log(response, 1)\n   *  }\n   * @return logs data to console, sentry and log file as appropriate\n   */\n  async log(loggingData: loggingData, type?: number | string) {\n    // Meta for Cloud Logging\n    console.log('Stack error: \"' + loggingData.stack + '\"')\n    let metadata = {\n      resource: {\n        type: 'global'\n      },\n      severity: 'INFO'\n    }\n    let data = new Error()\n\n    if (loggingData.error) data = loggingData.error\n    else if (loggingData.name)\n      data.message = i18.t(loggingData.name, loggingData.translate)\n    else if (loggingData.raw) data.message = loggingData.raw\n    else {\n      this.log(new Error('errors.logging'))\n      return false\n    }\n    // Defines log type\n    if (type && typeof type == 'string') {\n      if (this.loglevels.indexOf(type) != -1) {\n        metadata.severity = type.toUpperCase()\n        type = this.loglevels.indexOf(type)\n      } else {\n        metadata.severity = 'DEFAULT'\n        type = 0\n      }\n    } else if (typeof type == 'number' && type < this.loglevels.length) {\n      metadata.severity = this.loglevels[type].toUpperCase()\n      type = type\n    } else {\n      metadata.severity = `DEFAULT`\n      type = 0\n    }\n\n    // log to cloud logger\n    // if (this.constructData.gcp?.enabled) {\n    //   let entry = this.gcpLogger.entry(metadata, data)\n    //   try {\n    //     await this.gcpLogger.write(entry)\n    //   } catch (err) {\n    //     this.log({ raw: `Thrown error: ${err}` }, 5)\n    //     this.constructData.gcp.enabled = false\n    //   }\n    // }\n\n    // // Translate the metadata\n    // metadata.severity = await this.translate(\n    //   `logging.${metadata.severity.toLowerCase()}`\n    // )\n\n    // // add spacing\n    // if (metadata.severity.length < 15) {\n    //   for (let i = metadata.severity.length; i < 15; i++) {\n    //     metadata.severity += ' '\n    //   }\n    // }\n\n    // if (type >= this.loglevel || process.env.DEBUG == 'true' || type == 1) {\n    //   // Log to local logger\n    //   if (this.constructData.file?.enabled) {\n    //     try {\n    //       fs.appendFile(\n    //         `${this.constructData.file?.config.logDirectory}/${this.constructData.file?.config.fileNamePattern}`,\n    //         `${metadata.severity}     ` + data + '\\r\\n',\n    //         err => {\n    //           if (err) throw new Error(err.message)\n    //         }\n    //       )\n    //     } catch (err) {\n    //       this.log({ error: err }, 5)\n    //       this.constructData.file.enabled = false\n    //     }\n    //   }\n\n    //   // @ts-expect-error Colorise\n    //   metadata.severity = style.log[`${this.loglevels[type]}`](\n    //     metadata.severity\n    //   )\n\n    //   if (!!this.constructData.console?.enabled)\n    //     console.log(`${metadata.severity}     ` + data.message)\n\n    //   // Log to sentry\n    //   if (type > 4 && this.constructData.sentry?.enabled) {\n    //     try {\n    //       const t: number = type\n    //       this.sentry.withScope(scope => {\n    //         if (t == 5) scope.setLevel(this.sentry.Severity.Error)\n    //         else if (t > 6) scope.setLevel(this.sentry.Severity.Fatal)\n    //         this.sentry.captureEvent(data)\n    //       })\n    //     } catch (_) {\n    //       this.log({ error: _ }, 5)\n    //       this.constructData.sentry.enabled = false\n    //     }\n    //   }\n    // }\n    return true\n  }\n\n  translate(name: string): string {\n    return i18.t(name)\n  }\n\n  /**\n   * Used to shutdown logging - to ensure that all logs are processed\n   * @author TGTGamer\n   * @since 1.0.0-alpha\n   */\n  shutdown(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.sentry\n        .close(2000)\n        .then(async () => {\n          // await this.log(\n          //   { raw: 'Logger successfully shutdown - safe to end all processes' },\n          //   2\n          // )\n          resolve()\n        })\n        .catch(_ => reject(_))\n    })\n  }\n}\n"]}