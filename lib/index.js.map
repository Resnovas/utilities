{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;AAIA,wDAA6B;AAC7B,qDAA0B;AAC1B,oDAAyB;AAuEzB,IAAY,aAUX;AAVD,WAAY,aAAa;IACvB,uDAAW,CAAA;IACX,qDAAW,CAAA;IACX,mDAAU,CAAA;IACV,uDAAY,CAAA;IACZ,mDAAU,CAAA;IACV,qDAAW,CAAA;IACX,2DAAc,CAAA;IACd,qDAAW,CAAA;IACX,6DAAe,CAAA,CAAC,qCAAqC;AACvD,CAAC,EAVW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAUxB;AAqDD,MAAa,gBAAiB,SAAQ,KAAK;IASzC,YAAY,IAAmB,EAAE,OAAgB,EAAE,OAAwB;QACzE,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA;QAC7B,IAAI,CAAC,SAAS,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;QACjC,IAAI,CAAC,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,CAAC,CAAA;QACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;QACjC,IAAI,CAAC,MAAM,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAA;QAE/B,0BAA0B;QAC1B,aAAa;QACb,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAA;QACxC,IAAI,WAAW;YAAE,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;IAC3D,CAAC;CACF;AA1BD,4CA0BC","sourcesContent":["import { LogEntry } from '@google-cloud/logging/build/src/entry'\nimport { ApiResponse } from '@google-cloud/logging/build/src/log'\nimport { Primitive } from '@sentry/types'\n\nexport * from 'html-entities'\nexport * from './localize'\nexport * from './logging'\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      __rootdir__: string\n      logging: any\n    }\n  }\n}\n\nexport interface fileDataType {\n  enabled: boolean\n  config: {\n    logDirectory: string\n    fileNamePattern: string\n    dateFormat?: string\n  }\n}\nexport interface consoleData {\n  enabled: boolean\n}\nexport interface GCPData {\n  enabled: boolean\n  projectid: string\n  logname: string\n}\nexport interface SentryDataType {\n  enabled: boolean\n  config: {\n    dsn: string\n    debug?: boolean\n    release?: string\n    environment?: string\n    serverName?: string\n    sampleRate?: number\n    maxBreadcrumbs?: number\n    attachStacktrace?: boolean\n    tracesSampleRate?: number\n    normalizeDepth?: number\n  }\n  extras?: {\n    user?: {\n      email?: string\n    }\n    tags?: StringPair\n    context?: SentryContext[]\n  }\n}\nexport type StringPair = {\n  [key: string]: Primitive\n}\nexport type SentryContext = {\n  name: string\n  data: Record<string, unknown>\n}\n\nexport type constructPair = {\n  data: LoggingDataClass\n  level: number\n}\n\nexport type userData = {\n  id?: string\n  email?: string\n  username?: string\n  platform?: string\n  arch?: string\n  release?: string\n}\n\nexport enum LoggingLevels {\n  unknown = 0, // the log entry has no assigned severity level.\n  debug = 100, //  Debug or trace information.\n  info = 200, //  Routine information, such as ongoing status or performance.\n  notice = 300, //  Normal but significant events, such as start up, shut down, or a configuration change.\n  warn = 400, //  Warning events might cause problems.\n  error = 500, //  Error events are likely to cause problems.\n  critical = 600, //  Critical events cause more severe problems or outages.\n  alert = 700, //  A person must take an action immediately.\n  emergency = 800 //  One or more systems are unusable.\n}\n\nexport type T = {\n  defaultValue?: string[]\n  count?: number\n  context?: string\n  replace?: any[] | {}\n  lng?: string\n  lngs?: string[]\n  fallbackLng?: string\n  ns?: string\n  keySeparator?: string\n  nsSeparator?: string\n  returnObjects?: boolean\n  joinArrays?: string\n  postProcess?: string | string[]\n  interpolation?: interpolation\n  skipInterpolation?: boolean\n}\n\nexport type interpolation = {\n  format?: () => string\n  formatSeparator?: string\n  escape?: (str?: string) => string\n  escapeValue?: boolean\n  useRawValueToEscape?: boolean\n  prefix?: string\n  suffix?: string\n  prefixEscaped?: string\n  suffixEscaped?: string\n  unescapeSuffix?: string\n  unescapePrefix?: string\n  nestingPrefix?: string\n  nestingSuffix?: string\n  nestingPrefixEscaped?: string\n  nestingSuffixEscaped?: string\n  nestingOptionsSeparator?: string\n  defaultVariables?: any[] | {}\n  maxReplaces?: number\n  skipOnVariables?: boolean\n}\n\nexport interface LoggingOptions {\n  errors?: Error\n  translate?: boolean\n  userData?: userData\n  T?: T\n  metadata?: LogEntry\n  decode?: boolean\n  tags?: StringPair\n  context?: SentryContext[]\n}\n\nexport class LoggingDataClass extends Error {\n  errors?: Error\n  translate?: boolean\n  userData?: userData\n  T?: T\n  metadata?: LogEntry\n  decode?: boolean\n  tags?: StringPair\n  context?: SentryContext[]\n  constructor(name: LoggingLevels, message?: string, options?: LoggingOptions) {\n    super(message)\n    this.name = name.toString()\n    this.errors = options?.errors\n    this.translate = options?.translate\n    this.userData = options?.userData\n    this.T = options?.T\n    this.metadata = options?.metadata\n    this.decode = options?.decode\n    this.tags = options?.tags\n    this.context = options?.context\n\n    // restore prototype chain\n    // @ts-ignore\n    const actualProto = new.target.prototype\n    if (actualProto) Object.setPrototypeOf(this, actualProto)\n  }\n}\nexport interface ConstructData {\n  gcp?: GCPData\n  sentry?: SentryDataType\n  file?: fileDataType\n  console?: consoleData\n  logLevel?: LoggingLevels\n}\n\nexport interface LogReturn {\n  sentry?: LogReturned\n  file?: LogReturned\n  console?: LogReturned\n  gcp?: LogReturned\n}\n\nexport interface LogReturned {\n  logged: boolean\n  success?: boolean\n  eventID?: string\n  response?: ApiResponse\n}\n"]}