{"version":3,"file":"types.js","sourceRoot":"/","sources":["types.ts"],"names":[],"mappings":";;;AA2DA,MAAa,WAAY,SAAQ,KAAK;IAMpC,YACE,IAAmB,EACnB,OAAgB,EAChB,MAAwB,EACxB,OAKC;QAED,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,SAAS,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;QACjC,IAAI,CAAC,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,CAAC,CAAA;QACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA;QAEjC,0BAA0B;QAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAA;QACxC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;IAC1C,CAAC;CACF;AA7BD,kCA6BC","sourcesContent":["import { Metadata } from '@google-cloud/logging/build/src/log'\n\nexport interface ConstructData {\n  gcp?: GCPData\n  sentry?: SentryData\n  file?: fileData\n  console?: consoleData\n}\nexport interface fileData {\n  enabled: boolean\n  config: {\n    logDirectory: string\n    fileNamePattern: string\n    dateFormat: string\n  }\n}\nexport interface consoleData {\n  enabled: boolean\n}\nexport interface GCPData {\n  enabled: boolean\n  projectid: string\n  logname: string\n}\nexport interface SentryData {\n  enabled: boolean\n  config: {\n    dsn: string\n    debug?: boolean\n    release?: string\n    environment?: string\n    serverName?: string\n    sampleRate?: number\n    maxBreadcrumbs?: number\n    attachStacktrace?: boolean\n    tracesSampleRate?: number\n    normalizeDepth?: number\n  }\n  extras?: {\n    user?: {\n      email?: string\n    }\n    tags?: StringPair[]\n    context?: SentryContext[]\n  }\n}\ntype SentryContext = {\n  name: string\n  data: Record<string, unknown>\n}\ntype StringPair = {\n  key: string\n  value: string\n}\nexport type constructPair = {\n  data: loggingData\n  level: number\n}\n\nexport class loggingData extends Error {\n  errors?: Error[] | Error\n  translate?: boolean\n  userData?: userData\n  T?: T\n  metadata?: Metadata\n  constructor(\n    name: LoggingLevels,\n    message?: string,\n    errors?: Error[] | Error,\n    options?: {\n      translate?: boolean\n      userData?: userData\n      T?: T\n      metadata?: Metadata\n    }\n  ) {\n    super(message)\n    this.name = name\n    this.errors = errors\n    this.translate = options?.translate\n    this.userData = options?.userData\n    this.T = options?.T\n    this.metadata = options?.metadata\n\n    // restore prototype chain\n    const actualProto = new.target.prototype\n    Object.setPrototypeOf(this, actualProto)\n  }\n}\n\ntype userData = {\n  id?: string\n  email?: string\n  username?: string\n  platform?: string\n  arch?: string\n  release?: string\n}\nexport type LoggingLevels =\n  | 'DEFAULT'\n  | '0' // the log entry has no assigned severity level.\n  | 'DEBUG'\n  | '100' //  Debug or trace information.\n  | 'INFO'\n  | '200' //  Routine information, such as ongoing status or performance.\n  | 'NOTICE'\n  | '300' //  Normal but significant events, such as start up, shut down, or a configuration change.\n  | 'WARN'\n  | '400' //  Warning events might cause problems.\n  | 'ERROR'\n  | '500' //  Error events are likely to cause problems.\n  | 'CRITICAL'\n  | '600' //  Critical events cause more severe problems or outages.\n  | 'ALERT'\n  | '700' //  A person must take an action immediately.\n  | 'EMERGENCY'\n  | '800' //  One or more systems are unusable.\n\nexport type T = {\n  defaultValue?: string[]\n  count?: number\n  context?: string\n  replace?: string[]\n  lng?: string\n  lngs?: string[]\n  fallbackLng?: string\n  ns?: string\n  keySeparator?: string\n  nsSeparator?: string\n  returnObjects?: boolean\n  joinArrays?: string\n  postProcess?: string | string[]\n  interpolation?: interpolation\n  skipInterpolation?: boolean\n}\ntype interpolation = {\n  format?: () => string\n  formatSeparator?: string\n  escape?: (str?: string) => string\n  escapeValue?: boolean\n  useRawValueToEscape?: boolean\n  prefix?: string\n  suffix?: string\n  prefixEscaped?: string\n  suffixEscaped?: string\n  unescapeSuffix?: string\n  unescapePrefix?: string\n  nestingPrefix?: string\n  nestingSuffix?: string\n  nestingPrefixEscaped?: string\n  nestingSuffixEscaped?: string\n  nestingOptionsSeparator?: string\n  defaultVariables?: any[] | {}\n  maxReplaces?: number\n  skipOnVariables?: boolean\n}\n"]}